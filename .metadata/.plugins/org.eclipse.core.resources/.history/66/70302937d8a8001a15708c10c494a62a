package com.longnguyen.view;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;

import com.longnguyen.model.KhachHangModel;
import com.longnguyen.model.NhomKhachHangModel;

public class MainView extends JFrame {

	private static final long serialVersionUID = -2677719032991036030L;

	DefaultMutableTreeNode root = null;
	JTree tree;
	DefaultTableModel dtm;
	JTable tblNhanVien;
	JTextField txtMaKH,txtTenKH,txtGmail,txtDienThoai;
	
	JButton btnSave, btnDelete;
	
	ArrayList<KhachHangModel> dsKH;
	ArrayList<NhomKhachHangModel> dsNhom;
	
	NhomKhachHangModel nhomSelected = null;

	public MainView(String title) {
		super(title);
		addControls();
		addEvents();
		fakedata();
	}

	private void addEvents() {
		tree.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				DefaultMutableTreeNode nodeSelected = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
				if (nodeSelected != null && nodeSelected.getLevel() == 1) {
					nhomSelected = (NhomKhachHangModel) nodeSelected.getUserObject();
					hienThiDanhSachKhachHangTheoNhom();
				}
			}
		});
		tblNhanVien.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				int rowSelected = tblNhanVien.getSelectedRow();
				if (rowSelected == -1) {
					return;
				}
				String maString = tblNhanVien.getValueAt(rowSelected, 0) + "";
				String tenString = tblNhanVien.getValueAt(rowSelected, 1) + "";
				String sodienthoaiString = tblNhanVien.getValueAt(rowSelected, 2) + "";
				String emailString = tblNhanVien.getValueAt(rowSelected, 3) + "";
				
				txtMaKH.setText(maString);
				txtTenKH.setText(tenString);
				txtDienThoai.setText(sodienthoaiString);
				txtGmail.setText(emailString);
			}
		});
		
		btnSave.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				KhachHangModel KH = new KhachHangModel(
						txtMaKH.getText(), 
						txtTenKH.getText(), 
						txtDienThoai.getText(), 
						txtGmail.getText());
				
				
				
			}
		});
	}

	protected void hienThiDanhSachKhachHangTheoNhom() {
		dtm.setRowCount(0);
		for (KhachHangModel khachHangModel : nhomSelected.getKhanhHangS()) {
			Vector<String> vec = new Vector<String>();
			vec.add(khachHangModel.getMaKh());
			vec.add(khachHangModel.getTenKh());
			vec.add(khachHangModel.getSdtKh());
			vec.add(khachHangModel.getGmail());
			
			dtm.addRow(vec);
		}
		
	}

	private void addControls() {
		Container con = getContentPane();

		JPanel pnTree = new JPanel();
		pnTree.setLayout(new BorderLayout());
		root = new DefaultMutableTreeNode("Công ty ABC");
		tree = new JTree(root);
		
		
		JScrollPane sc = new JScrollPane(tree, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		pnTree.add(sc, BorderLayout.CENTER);
		
		con.setLayout(new BorderLayout());
		pnTree.setPreferredSize(new Dimension(250, 0));

		JPanel pnRight = new JPanel();
		pnRight.setLayout(new BorderLayout());
		pnRight.setPreferredSize(new Dimension(0, 300));
		JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, pnTree, pnRight);
		sp.setOneTouchExpandable(true);
		
		JPanel pnRightTop = new JPanel();
		
		JPanel pnRightBottom = new JPanel();
		JSplitPane spR = new JSplitPane(JSplitPane.VERTICAL_SPLIT, pnRightTop, pnRightBottom);
		pnRight.add(spR, BorderLayout.CENTER);
		
		
		con.add(sp, BorderLayout.CENTER);
		
		
		dtm = new DefaultTableModel();
		dtm.addColumn("Mã Khách Hàng");
		dtm.addColumn("Tên Khách Hàng");
		dtm.addColumn("Số điện thoại");
		dtm.addColumn("Email");
		
//		// Đưa data vào table
//		String row1[] = {"KT1", "abc", "12345", "abc@gmail.com"};
//		dtm.addRow(row1);
//		String row2[] = {"KT2", "def", "12345", "def@gmail.com"};
//		dtm.addRow(row2);
//		String row3[] = {"KT3", "ocb", "12345", "ocb@gmail.com"};
//		dtm.addRow(row3);
//		String row4[] = {"KT4", "code", "12345", "code@gmail.com"};
//		dtm.addRow(row4);
		
		tblNhanVien = new JTable(dtm);
		JScrollPane scTable = new JScrollPane(tblNhanVien, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		pnRightTop.setLayout(new BorderLayout());
		pnRightTop.add(scTable, BorderLayout.CENTER);
		
		
		JPanel pnMaKH = new JPanel();
		JLabel lblMaKH = new JLabel("Mã Khách hàng: ");
		txtMaKH = new JTextField(25);
		pnMaKH.add(lblMaKH);
		pnMaKH.add(txtMaKH);
		pnRightBottom.add(pnMaKH);
		
		JPanel pnTenKH = new JPanel();
		JLabel lblTenKH = new JLabel("Tên Khách hàng: ");
		txtTenKH = new JTextField(25);
		pnTenKH.add(lblTenKH);
		pnTenKH.add(txtTenKH);
		pnRightBottom.add(pnTenKH);
		
		JPanel pnDienThoai = new JPanel();
		JLabel lblDienThoai = new JLabel("Số Điện thoại: ");
		txtDienThoai = new JTextField(25);
		pnDienThoai.add(lblDienThoai);
		pnDienThoai.add(txtDienThoai);
		pnRightBottom.add(pnDienThoai);
		
		JPanel pnGmail = new JPanel();
		JLabel lblGmail = new JLabel("Gmail: ");
		txtGmail = new JTextField(25);
		pnGmail.add(lblGmail);
		pnGmail.add(txtGmail);
		pnRightBottom.add(pnGmail);
		
		JPanel pnButtonBottom = new JPanel();
		pnButtonBottom.setLayout(new FlowLayout());
		btnSave = new JButton("Lưu khách hàng");
		btnDelete = new JButton("Xóa khách hàng");
		pnButtonBottom.add(btnDelete);
		pnButtonBottom.add(btnSave);
		pnRightBottom.add(pnButtonBottom);
		
		
		
		//Chinh sua
		txtMaKH.setPreferredSize(txtTenKH.getPreferredSize());
		txtDienThoai.setPreferredSize(txtTenKH.getPreferredSize());
		txtGmail.setPreferredSize(txtTenKH.getPreferredSize());
		
		lblMaKH.setPreferredSize(lblTenKH.getPreferredSize());
		lblDienThoai.setPreferredSize(lblTenKH.getPreferredSize());
		lblGmail.setPreferredSize(lblTenKH.getPreferredSize());
		
	}
	
	public void fakedata() {
		dsNhom = new ArrayList<NhomKhachHangModel>();
		NhomKhachHangModel VIP = new NhomKhachHangModel("n1", "Khách hàng vip ");

		NhomKhachHangModel tiemNang = new NhomKhachHangModel("n1", "Khách hàng tiềm năng ");

		NhomKhachHangModel khoTinh = new NhomKhachHangModel("n1", "Khách hàng khó tính  ");
		
		dsNhom.add(VIP); dsNhom.add(tiemNang); dsNhom.add(khoTinh);
		
		
		VIP.getKhanhHangS().add(new KhachHangModel("KT1", "abc", "12345", "abc@gmail.com"));
		VIP.getKhanhHangS().add(new KhachHangModel("KT2", "def", "12345", "def@gmail.com"));
		VIP.getKhanhHangS().add(new KhachHangModel("KT3", "ocb", "12345", "ocb@gmail.com"));
		VIP.getKhanhHangS().add(new KhachHangModel("KT4", "code", "12345", "code@gmail.com"));
		
		for (NhomKhachHangModel nhomKhachHangModel : dsNhom) {
			DefaultMutableTreeNode nodeNhom = new DefaultMutableTreeNode(nhomKhachHangModel);
			root.add(nodeNhom);
			for (KhachHangModel khachHangModel : nhomKhachHangModel.getKhanhHangS()) {
				DefaultMutableTreeNode nodeKH = new DefaultMutableTreeNode(khachHangModel);
				nodeNhom.add(nodeKH);
			}
		}
		
		tree.expandRow(0);
		
		
		
	}

	public void showWindow() {
		this.setSize(800, 800);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setVisible(true);
	}
}
